services:
  api-v0:
    image: "marcheiden/formula-ap1:api-v0"
    depends_on:
      postgres:
        condition: service_started
        restart: true # Restart api service if postgres is restarted manually
    restart: unless-stopped
    # Set health status to healthy if api processed /seasons get request successfully
    # Healthcheck options: https://docs.docker.com/engine/reference/builder/#healthcheck
    healthcheck:
      test: ["CMD", "wget", "--spider", "-q", "http://localhost:8080/seasons"]
      start_period: 60s
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      SPRING_PROFILES_ACTIVE: prod
      #DB_URL: //postgres:5432/postgres #default
      DB_USERNAME: postgres
      DB_PASSWORD: {{ docker_compose_postgres_password }}
      #DEFAULT_PAGE_SIZE: 25 #default
      #MAX_PAGE_SIZE: 100 #default

  postgres:
    image: "postgres:15-alpine"
    restart: unless-stopped
    environment:
      POSTGRES_DB: postgres
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: {{ docker_compose_postgres_password }}
    volumes:
      - type: volume
        source: postgres-data
        target: /var/lib/postgresql/data

  # On playwright error: maybe set ipc: "host" as suggested in the docs:
  # https://playwright.dev/docs/docker#run-the-image
  scraper-v0:
    image: "marcheiden/formula-ap1:scraper-v0"
    init: true # See https://github.com/nodejs/docker-node/blob/main/docs/BestPractices.md#handling-kernel-signals
    depends_on:
      api-v0:
        condition: service_healthy # Start scraper if api healthcheck resolved successfully
        restart: false
    # Use seccomp profile as suggested in the docs: https://playwright.dev/docs/docker#crawling-and-scraping
    # Seccomp profile: https://github.com/microsoft/playwright/blob/main/utils/docker/seccomp_profile.json
    security_opt:
      - seccomp:./scraper-seccomp-profile.json
    environment:
      API_BASE_URL: http://api-v0:8080
      START_SEASON_YEAR: 2023
      #LOG_LEVEL: info #default
      #SCRAPE_SEASON_DATA_OF_FIRST_SEASON: true #default
    volumes:
      - type: volume
        source: scraper-v0-logs
        target: /app/logs

  traefik:
    image: traefik:v2.10
    restart: unless-stopped
    command:
      - --configFile=/etc/traefik/traefik-static-config.yml
    volumes:
      # Bind mount traefik config files
      - type: bind
        source: ./traefik-static-config.yml
        target: /etc/traefik/traefik-static-config.yml
        read_only: true
      - type: bind
        source: ./traefik-dynamic-config.yml
        target: /etc/traefik/traefik-dynamic-config.yml
        read_only: true

      - type: volume
        source: traefik-logs
        target: /var/log/traefik
    ports:
      - "80:80"
      {% if docker_compose_profile == "dev" %}
      # Traefik api
      - "8080:8080"
      {% endif %}

volumes:
  postgres-data:
  scraper-v0-logs:
  traefik-logs:
